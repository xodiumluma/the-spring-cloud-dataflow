name: Build Package Bundle
description: Build Package Bundle
inputs:
  dataflow-version:
    description: dataflow version
    required: true
  skipper-version:
    description: skipper version
    required: true
  server-version:
    description: server version
    required: true
  server-repository:
    description: server repository
    required: true
  skipper-repository:
    description: skipper repository
    required: true
  ctr-version:
    description: ctr version
    required: true
  package-name:
    description: package name
    required: true
  package-bundle-template:
    description: path to package bundle template
    required: true
  imgpkg-lock-template:
    description: path to imgpkg lock template
    required: true
  config:
    description: path to ytt config files dir
    required: true
  project-directory:
    description: The working directory
    required: true
  SRP_CLIENT_ID:
    description: secrets.SRP_CLIENT_ID
    required: false
  SRP_CLIENT_SECRET:
    description: secrets.SRP_CLIENT_SECRET
    required: false
outputs:
  bundle-path:
    description: Location path where bundle was build
    value: ${{ steps.tanzu-dance.outputs.bundle-path }}

runs:
  using: "composite"
  steps:
  - name: Tanzu Dance
    id: tanzu-dance
    env:
      DATAFLOW_VERSION: ${{ inputs.dataflow-version }}
      SKIPPER_VERSION: ${{ inputs.skipper-version }}
      SKIPPER_REPOSITORY: ${{ inputs.skipper-repository }}
      SERVER_VERSION: ${{ inputs.server-version }}
      SERVER_REPOSITORY: ${{ inputs.server-repository }}
      CTR_VERSION: ${{ inputs.ctr-version }}
      PACKAGE_NAME: ${{ inputs.package-name }}
      PACKAGE_BUNDLE_TEMPLATE: ${{ inputs.package-bundle-template }}
      PACKAGE_BUNDLE_GENERATED: ${{ runner.temp }}/generated/packagebundle
      VENDIR_SRC_IN: ${{ inputs.config }}
      IMGPKG_LOCK_TEMPLATE: ${{ inputs.imgpkg-lock-template }}
      IMGPKG_LOCK_GENERATED_IN: ${{ runner.temp }}/generated/imgpkgin
      IMGPKG_LOCK_GENERATED_OUT: ${{ runner.temp }}/generated/imgpkgout
      SRP_CLIENT_ID: ${{ inputs.SRP_CLIENT_ID }}
      SRP_CLIENT_SECRET: ${{ inputs.SRP_CLIENT_SECRET }}
    shell: bash
    working-directory: ${{ inputs.project-directory }}
    run: |
      echo "bundle-path=$PACKAGE_BUNDLE_GENERATED" >> $GITHUB_OUTPUT
      SCDF_DIR="${{ inputs.project-directory || '.' }}"
      if [ "$USE_SRP" == "true" ]; then
        if [ "$SRP_SCRIPTS" == "" ]; then
          echo "SRP_SCRIPTS not defined"
          exit 2
        fi
        export OBSERVATION=package-bundle
        export OUTPUT_VERSION=$SERVER_VERSION
        $SRP_SCRIPTS/run-under-observer.sh "${{ github.action_path }}/build-package-bundle.sh"
      else
        "${{ github.action_path }}/build-package-bundle.sh"
      fi
