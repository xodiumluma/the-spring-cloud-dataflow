#@ load("@ytt:data", "data")
#@ load("dataflow.star", "dataflow_image")
#@ load("dataflow.star", "ctr_image")
#@ load("dataflow.star", "dataflow_container_env")
#@ load("dataflow.star", "has_image_pull_secrets")
#@ load("dataflow.star", "registry_secret_ref")
#@ load("dataflow.star", "image_pull_secrets")
#@ load("dataflow.star", "dataflow_liveness_path")
#@ load("dataflow.star", "dataflow_readiness_path")
#@ load("dataflow.star", "dataflow_has_password")
#@ load("common/common.star", "non_empty_string")

apiVersion: apps/v1
kind: Deployment
metadata:
  name: scdf-server
  annotations:
    kapp.k14s.io/change-group: "scdf.tanzu.vmware.com/server"
    kapp.k14s.io/change-rule.1: "upsert after upserting scdf.tanzu.vmware.com/db"
    kapp.k14s.io/change-rule.2: "upsert after upserting scdf.tanzu.vmware.com/skipper"
  labels:
    app: scdf-server
spec:
  selector:
    matchLabels:
      app: scdf-server
  replicas: 1
  template:
    metadata:
      labels:
        app: scdf-server
    spec:
      containers:
      - name: scdf-server
        image: #@ dataflow_image()
        imagePullPolicy: IfNotPresent
        volumeMounts:
        - name: config
          mountPath: /workspace/config
          readOnly: true
        #@ if dataflow_has_password():
        - name: database
          mountPath: /workspace/runtime/secrets/database
          readOnly: true
        #@ end
        - name: scdfmetadata
          mountPath: /workspace/runtime/secrets
          readOnly: true
        ports:
        - containerPort: 9393
        startupProbe:
          httpGet:
            port: 9393
            path: #@ dataflow_liveness_path()
          failureThreshold: 4
          initialDelaySeconds: 10
          timeoutSeconds: 3
          periodSeconds: 15
        livenessProbe:
          httpGet:
            path: #@ dataflow_liveness_path()
            port: 9393
          failureThreshold: 4
          initialDelaySeconds: 1
          timeoutSeconds: 3
          periodSeconds: 15
        readinessProbe:
          httpGet:
            path: #@ dataflow_readiness_path()
            port: 9393
          failureThreshold: 3
          initialDelaySeconds: 5
          timeoutSeconds: 3
          periodSeconds: 15
        resources:
          limits:
          #@ if non_empty_string(data.values.scdf.server.resources.limits.cpu):
            cpu: #@ data.values.scdf.server.resources.limits.cpu
          #@ end
          #@ if non_empty_string(data.values.scdf.server.resources.limits.memory):
            memory: #@ data.values.scdf.server.resources.limits.memory
          #@ end
          requests:
            cpu: #@ data.values.scdf.server.resources.requests.cpu
            memory: #@ data.values.scdf.server.resources.requests.memory
        env: #@ dataflow_container_env()
      serviceAccountName: scdf-sa
      #@ if has_image_pull_secrets():
      imagePullSecrets: #@ image_pull_secrets()
      #@ else:
      imagePullSecrets: [{name: reg-creds}]
      #@ end
      volumes:
      - name: config
        configMap:
          name: scdf-server
          items:
          - key: application.yaml
            path: application.yaml
      #@ if dataflow_has_password():
      - name: database
        secret:
          secretName: db-dataflow
      #@ end
      #@ if has_image_pull_secrets():
      - name: scdfmetadata
        secret:
          secretName: #@ registry_secret_ref()
      #@ else:
      - name: scdfmetadata
        secret:
          secretName: reg-creds
      #@ end
